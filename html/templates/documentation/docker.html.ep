% layout 'default';

<div id="page_header">
  <div class="breadcrumb">
    <ul>
      <li><a href="/">Home</a></li>
      <li>&raquo;</li>
      <li><a href="/documentation.html">Documentation</a></li>
      <li>&raquo;</li>
      <li>Docker</li>
    </ul>
  </div>
  <div class="clearfix"></div>
  <h1>Docker Private Registry</h1>
  <div class="clearfix"></div>
</div>


<div class="main_content">
  <h1><span class="highlight">Create </span> a private docker registry</h1>

<p>To create a private docker registry you just need repositor.io and some place to store the images.</p>

        <h2>Using a demo docker container</h2>
        <p>If you don't want to setup everything manually or just want to play a bit, you can also use a preconfigured <a href="https://registry.hub.docker.com/u/jbrunk/repositorio-docker/">docker container</a>. Many thanks to <a href="https://plus.google.com/+JÃ¼rgenBrunk">J&uuml;rgen Brunk</a> for the contribution.</p>
          <pre><code class="bash">$ docker run -d -p 3000:3000 --name repositorio-docker jbrunk/repositorio-docker</code></pre>
          <p>With this you can just skip to <b>Creating User</b>.</p>

          <h2>Manually configuration</h2>
          <p>First you need to configure the docker repository inside your <i>/etc/repositorio.conf</i> file.</p>
            <pre><code>&lt;Repository docker&gt;
    local = docker
    type  = Docker
&lt;/Repository&gt;</code></pre>

          <p>Now you can initialize the repository as usual. This will create a <i>docker</i> directory under your <i>RepositoryRoot</i>.</p>
          <pre><code class="bash">$ repositorio --repo=docker --init</code></pre>
          <h2>Serving Content</h2>
          <p>To get your Docker registry up and running you need to start a webserver to serve the content. You can't use a plain Apache or nginx server to serve the content because the docker client is not just downloading files like <i>yum</i> or <i>apt</i>. So repositor.io is comming with an integrated webserver.</p>
          <pre><code class="bash">$ repositorio --repo=docker --server prefork</code></pre>
          <p>This will start a preforking webserver on port 3000. If you want to use another port you can get help for all the parameters with the following command.</p> 
          <pre><code class="bash">$ repositorio --repo=docker --server prefork -- --help</code></pre>

          <h2>Creating User</h2>
          <p>Now you are ready to create users. To register a new user, you can use the <i>docker</i> client.</p>
          <pre><code class="bash">$ docker login -e some@mail.tld -p some-save-password -u some-user http://myserver:3000/v1/</code></pre>

          <h2>Push Images</h2>
          <p>After create a user you'll be able to push and pull images into repositor.io.</p>

          <p>First, download an image from the official docker registry.</p>
          <pre><code class="bash">$ docker pull ubuntu</code></pre>

          <p>Now you have to tag the image with a special name. You have to include the domain of your private registry in the tag name.</p>
          <pre><code class="bash">$ docker tag myserver:3000/ubuntu</code></pre>

          <p>After tagging your image, you can push it to your repositor.io server.</p>
          <pre><code class="bash">$ docker push myserver:3000/ubuntu</code></pre>

          <h2>Pull Images</h2>
          <p>Pulling an image is similar to pushing images.</p>
          <pre><code class="bash">$ docker pull myserver:3000/ubuntu</code></pre>

          <h2>Have Problems?</h2>
          <p>If you don't use SSL encryption you have to add the following option to your docker daemons options:</p>
          <pre><code>--insecure-registry myserver:3000</code></pre>

          <p>If you have problems, questions or suggestions, feel free to open an issue on <a href="https://github.com/RexOps/repositorio">Github</a> and/or join our irc channel on <a href="irc://irc.freenode.net/rex">irc.freenode.net</a> channel <b>#rex</b>.</p>

</div>
